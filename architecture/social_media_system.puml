@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

Person(user, "User", "Social Network User")
System(analytics, "Analytics", "Stores different analytic information about users")
System_Ext(email, "E-mail", "An external e-mail system")
ContainerQueue(messageQueue, "Events Queue", "Kafka", "Message queue for events from social network system")

System_Boundary(socialNetwork, "Social Network") {
    Container(spa, "Single-Page Application", "Typescript, Nextjs", "Provides the static content and all the social network functionality to users via their web browser")
    Container(api, "Api Gateway", "Go", "Provides social network functionality via API")

    Container(filesService, "Files Service", "Go", "Handles files")
    ContainerDb(filesDatabase, "Files Database", "Amazon S3")

    Container(messagingService, "Messaging Service", "Go", "Handles messages")
    ContainerDb(messagingDatabase, "Messaging Database", "PgSQL", "Stores messages")

    Container(postsService, "Post Service", "Go", "Handles posts")
    ContainerDb(postsDatabase, "Post Database", "PgSQL", "Stores posts")

    Container(profilesService, "Profile Service", "Go", "Handles users")
    ContainerDb(profilesDatabase, "Profile Database", "MongoDB", "Stores information about users")

    Container(relationsService, "Relations Service", "Go", "Handles relations")
    ContainerDb(relationsDatabase, "Relations Database", "Neo4j", "Stores relations")

    ContainerQueue(postsQueue, "Posts Queue", "Kafka", "Posts queue for newly created posts")

    Container(feedService, "Feed Service", "Go", "Builds feeds for each user. if celebrity updates their feed, update only their posts. For the users subscribed on the celebrity, merge their celebrity subscriptions in fly")
    ContainerDb(feedDatabase, "Feed Database", "Tarantool", "Stores feeds")
}

Rel(user, spa, "Uses", "HTTPS")
Rel(email, user, "Sends emails to")
Rel(spa, api, "Uses", "HTTPS")

Rel(api, filesService, "Gets data from", "HTTPS")
Rel(api, messagingService, "Gets data from", "HTTPS")
Rel(api, postsService, "Gets data from", "HTTPS")
Rel(api, profilesService, "Gets data from", "HTTPS")
Rel(api, relationsService, "Gets data from", "HTTPS")
Rel(api, feedService, "Gets data from", "HTTPS")

Rel(filesService, filesDatabase, "Reads/Writes")

Rel(messagingService, messagingDatabase, "Reads/Writes")
Rel(messagingService, email, "Sends emails using")
Rel(messagingService, messageQueue, "Sends message events")

Rel(postsService, postsDatabase, "Reads/Writes")
Rel(postsService, email, "Sends emails using")
Rel(postsService, messageQueue, "Sends posts events")
Rel(postsService, postsQueue, "Sends events about newly created posts")

Rel(feedService, postsService, "Requests posts when there is no posts for the user or older than 10 last posts were requested")
Rel(feedService, relationsService, "Request subscriptions for the user to build their feed")
Rel(feedService, feedDatabase, "Reads/Writes")
Rel(feedService, postsQueue, "Subscribes on posts events")

Rel(profilesService, profilesDatabase, "Reads/Writes")
Rel(profilesService, email, "Sends emails using")
Rel(profilesService, messageQueue, "Sends users events")

Rel(relationsService, relationsDatabase, "Reads/Writes")
Rel(relationsService, messageQueue, "Sends relation events")

Rel(analyticsSystem, messageQueue, "Subscribes on events from social network system")
@enduml